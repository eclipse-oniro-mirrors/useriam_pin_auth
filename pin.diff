diff --git a/test/fuzztest/services/modules/driver/pinauthdriverhdi_fuzzer/pin_auth_driver_hdi_fuzzer.cpp b/test/fuzztest/services/modules/driver/pinauthdriverhdi_fuzzer/pin_auth_driver_hdi_fuzzer.cpp
index 0d00be8da16980280027eed1072807eaead19c1f..7e8744b9989552e160fd5b7cd47425896abde036 100644
--- a/test/fuzztest/services/modules/driver/pinauthdriverhdi_fuzzer/pin_auth_driver_hdi_fuzzer.cpp
+++ b/test/fuzztest/services/modules/driver/pinauthdriverhdi_fuzzer/pin_auth_driver_hdi_fuzzer.cpp
@@ -41,7 +41,6 @@ namespace UserIam {
 namespace PinAuth {
 namespace {
 
-static uint64_t g_index = 0;
 std::shared_ptr<PinAuthDriverHdi> pinAuthDriverHdi_(nullptr);
 
 void InitPinAuthDriverHdi(Parcel &parcel)
@@ -82,7 +81,7 @@ void PinAuthDriverHdiFuzzTest(const uint8_t *data, size_t size)
     parcel.WriteBuffer(data, size);
     parcel.RewindRead(0);
     InitPinAuthDriverHdi(parcel);
-    uint32_t index = g_index++ % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
+    uint32_t index = parcel.ReadUint32() % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
     auto fuzzFunc = g_fuzzFuncs[index];
     fuzzFunc(parcel);
     return;
diff --git a/test/fuzztest/services/modules/executors/pinauthallinonehdi_fuzzer/pin_auth_all_in_one_hdi_fuzzer.cpp b/test/fuzztest/services/modules/executors/pinauthallinonehdi_fuzzer/pin_auth_all_in_one_hdi_fuzzer.cpp
index 942347fed847b7a58ea5c37ba0b077bc4275aebb..05afc4323614a0316be739ec74eaf3b41b052403 100644
--- a/test/fuzztest/services/modules/executors/pinauthallinonehdi_fuzzer/pin_auth_all_in_one_hdi_fuzzer.cpp
+++ b/test/fuzztest/services/modules/executors/pinauthallinonehdi_fuzzer/pin_auth_all_in_one_hdi_fuzzer.cpp
@@ -43,16 +43,14 @@ namespace UserIam {
 namespace PinAuth {
 namespace {
 
-static uint64_t g_index = 0;
 const uint64_t SCHEDULE_ID = 123;
-const uint32_t FUZZ_NUM = 2;
 auto executorProxy_ = sptr<IAllInOneExecutor>(new (std::nothrow) MockIAllInOneExecutorFuzzer);
 std::shared_ptr<PinAuthAllInOneHdi> hdi_(nullptr);
 std::shared_ptr<UserAuth::IExecuteCallback> iExecutorCallback_ = Common::MakeShared<MockIExecutorCallbackFuzzer>();
 
 void InitPinAuthAllInOneHdi(Parcel &parcel)
 {
-    hdi_ = Common::MakeShared<PinAuthAllInOneHdi>((g_index % FUZZ_NUM) == 0 ? nullptr : executorProxy_);
+    hdi_ = Common::MakeShared<PinAuthAllInOneHdi>(parcel.ReadBool() ? nullptr : executorProxy_);
 }
 
 void FuzzGetExecutorInfo(Parcel &parcel)
@@ -194,7 +192,7 @@ void PinAuthAllInOneHdiFuzzTest(const uint8_t *data, size_t size)
     parcel.WriteBuffer(data, size);
     parcel.RewindRead(0);
     InitPinAuthAllInOneHdi(parcel);
-    uint32_t index = g_index++ % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
+    uint32_t index = parcel.ReadUint32() % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
     auto fuzzFunc = g_fuzzFuncs[index];
     fuzzFunc(parcel);
     return;
diff --git a/test/fuzztest/services/modules/executors/pinauthcollectorhdi_fuzzer/pin_auth_collector_hdi_fuzzer.cpp b/test/fuzztest/services/modules/executors/pinauthcollectorhdi_fuzzer/pin_auth_collector_hdi_fuzzer.cpp
index ac660b06b083350b1114784d86b5f0339f3bfe6e..190e12fb12111f916df13f7ee69e13dec8cf4069 100644
--- a/test/fuzztest/services/modules/executors/pinauthcollectorhdi_fuzzer/pin_auth_collector_hdi_fuzzer.cpp
+++ b/test/fuzztest/services/modules/executors/pinauthcollectorhdi_fuzzer/pin_auth_collector_hdi_fuzzer.cpp
@@ -43,16 +43,14 @@ namespace UserIam {
 namespace PinAuth {
 namespace {
 
-static uint64_t g_index = 0;
 const uint64_t SCHEDULE_ID = 123;
-const uint32_t FUZZ_NUM = 2;
 auto executorProxy_ = sptr<ICollector>(new (std::nothrow) MockICollectorExecutorFuzzer);
 std::shared_ptr<PinAuthCollectorHdi> hdi_(nullptr);
 std::shared_ptr<UserAuth::IExecuteCallback> iExecutorCallback_ = Common::MakeShared<MockIExecutorCallbackFuzzer>();
 
 void InitPinAuthCollectorHdi(Parcel &parcel)
 {
-    hdi_ = Common::MakeShared<PinAuthCollectorHdi>((g_index % FUZZ_NUM) == 0 ? nullptr : executorProxy_);
+    hdi_ = Common::MakeShared<PinAuthCollectorHdi>(parcel.ReadBool() ? nullptr : executorProxy_);
 }
 
 void FuzzGetExecutorInfo(Parcel &parcel)
@@ -140,7 +138,7 @@ void PinAuthCollectorHdiFuzzTest(const uint8_t *data, size_t size)
     parcel.WriteBuffer(data, size);
     parcel.RewindRead(0);
     InitPinAuthCollectorHdi(parcel);
-    uint32_t index = g_index++ % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
+    uint32_t index = parcel.ReadUint32() % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
     auto fuzzFunc = g_fuzzFuncs[index];
     fuzzFunc(parcel);
     return;
diff --git a/test/fuzztest/services/modules/executors/pinauthexecutorcallbackhdi_fuzzer/pin_auth_executor_callback_hdi_fuzzer.cpp b/test/fuzztest/services/modules/executors/pinauthexecutorcallbackhdi_fuzzer/pin_auth_executor_callback_hdi_fuzzer.cpp
index ac4fae74948af5f2d6cd185f1b366e8363975b95..0700be3711b0d2fa9ed0f1f72e075a794a6d056d 100644
--- a/test/fuzztest/services/modules/executors/pinauthexecutorcallbackhdi_fuzzer/pin_auth_executor_callback_hdi_fuzzer.cpp
+++ b/test/fuzztest/services/modules/executors/pinauthexecutorcallbackhdi_fuzzer/pin_auth_executor_callback_hdi_fuzzer.cpp
@@ -44,10 +44,8 @@ namespace UserIam {
 namespace PinAuth {
 namespace {
 
-static uint64_t g_index = 0;
 const uint64_t SCHEDULE_ID = 123;
 const uint32_t TOKEN_ID = 2;
-const uint32_t FUZZ_NUM = 2;
 auto allInOneExecutorProxy_ = sptr<IAllInOneExecutor>(new (std::nothrow) MockIAllInOneExecutorFuzzer);
 auto allInOneHdi_ = Common::MakeShared<PinAuthAllInOneHdi>(allInOneExecutorProxy_);
 auto collectorExecutorProxy_ = sptr<ICollector>(new (std::nothrow) MockICollectorExecutorFuzzer);
@@ -63,7 +61,7 @@ void InitPinAuthExecutorCallbackHdi(Parcel &parcel)
         .scheduleId = SCHEDULE_ID,
     };
     GetDataMode mode = static_cast<GetDataMode>(parcel.ReadInt32());
-    if (g_index % FUZZ_NUM == 0) {
+    if (parcel.ReadBool()) {
         pinAuthExecutorCallbackHdi_ = Common::MakeShared<PinAuthExecutorCallbackHdi>(
             frameWorkCallback_, allInOneHdi_, executorParam, mode);
     } else {
@@ -153,7 +151,7 @@ void PinAuthExecutorCallbackHdiFuzzTest(const uint8_t *data, size_t size)
     parcel.WriteBuffer(data, size);
     parcel.RewindRead(0);
     InitPinAuthExecutorCallbackHdi(parcel);
-    uint32_t index = g_index++ % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
+    uint32_t index = parcel.ReadUint32() % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
     auto fuzzFunc = g_fuzzFuncs[index];
     fuzzFunc(parcel);
     return;
diff --git a/test/fuzztest/services/modules/executors/pinauthverifierhdi_fuzzer/pin_auth_verifier_hdi_fuzzer.cpp b/test/fuzztest/services/modules/executors/pinauthverifierhdi_fuzzer/pin_auth_verifier_hdi_fuzzer.cpp
index 113487242c98dd4a8e9d2fefbfe47f9ef37c6b36..fcabcf2ff986d1f41033d25479f883a3d688530a 100644
--- a/test/fuzztest/services/modules/executors/pinauthverifierhdi_fuzzer/pin_auth_verifier_hdi_fuzzer.cpp
+++ b/test/fuzztest/services/modules/executors/pinauthverifierhdi_fuzzer/pin_auth_verifier_hdi_fuzzer.cpp
@@ -43,16 +43,14 @@ namespace UserIam {
 namespace PinAuth {
 namespace {
 
-static uint64_t g_index = 0;
 const uint64_t SCHEDULE_ID = 123;
-const uint32_t FUZZ_NUM = 2;
 auto executorProxy_ = sptr<IVerifier>(new (std::nothrow) MockIVerifierExecutorFuzzer);
 std::shared_ptr<PinAuthVerifierHdi> hdi_(nullptr);
 std::shared_ptr<UserAuth::IExecuteCallback> iExecutorCallback_ = Common::MakeShared<MockIExecutorCallbackFuzzer>();
 
 void InitPinAuthVerifierHdi(Parcel &parcel)
 {
-    hdi_ = Common::MakeShared<PinAuthVerifierHdi>((g_index % FUZZ_NUM) == 0 ? nullptr : executorProxy_);
+    hdi_ = Common::MakeShared<PinAuthVerifierHdi>(parcel.ReadBool() ? nullptr : executorProxy_);
 }
 
 void FuzzGetExecutorInfo(Parcel &parcel)
@@ -139,7 +137,7 @@ void PinAuthVerifierHdiFuzzTest(const uint8_t *data, size_t size)
     parcel.WriteBuffer(data, size);
     parcel.RewindRead(0);
     InitPinAuthVerifierHdi(parcel);
-    uint32_t index = g_index++ % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
+    uint32_t index = parcel.ReadUint32() % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
     auto fuzzFunc = g_fuzzFuncs[index];
     fuzzFunc(parcel);
     return;
diff --git a/test/fuzztest/services/modules/inputters/pinauthmanager_fuzzer/pin_auth_manager_fuzzer.cpp b/test/fuzztest/services/modules/inputters/pinauthmanager_fuzzer/pin_auth_manager_fuzzer.cpp
index bc02bf426ffab14543ade98411668be4abc7c652..e53f08b1542716b08027f36c936e45fdf68ce8d3 100644
--- a/test/fuzztest/services/modules/inputters/pinauthmanager_fuzzer/pin_auth_manager_fuzzer.cpp
+++ b/test/fuzztest/services/modules/inputters/pinauthmanager_fuzzer/pin_auth_manager_fuzzer.cpp
@@ -41,15 +41,12 @@ namespace UserIam {
 namespace PinAuth {
 namespace {
 
-static uint64_t g_index = 0;
-const uint32_t FUZZ_NUM = 2;
-
 void FuzzRegisterInputer(Parcel &parcel)
 {
     IAM_LOGI("begin");
     uint32_t tokenId = parcel.ReadUint32();
     sptr<InputerGetData> inputer(nullptr);
-    if (g_index % FUZZ_NUM == 0) {
+    if (parcel.ReadBool()) {
         inputer = sptr<InputerGetData>(new (std::nothrow) MockInputerGetDataFuzzer());
     }
     PinAuthManager::GetInstance().RegisterInputer(tokenId, inputer);
@@ -64,7 +61,7 @@ void FuzzUnRegisterInputer(Parcel &parcel)
     IAM_LOGI("begin");
     uint32_t tokenId = parcel.ReadUint32();
     sptr<InputerGetData> inputer(nullptr);
-    if (g_index % FUZZ_NUM == 0) {
+    if (parcel.ReadBool()) {
         inputer = sptr<InputerGetData>(new (std::nothrow) MockInputerGetDataFuzzer());
     }
     PinAuthManager::GetInstance().UnRegisterInputer(tokenId);
@@ -93,7 +90,7 @@ void PinAuthManagerFuzzTest(const uint8_t *data, size_t size)
     Parcel parcel;
     parcel.WriteBuffer(data, size);
     parcel.RewindRead(0);
-    uint32_t index = g_index++ % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
+    uint32_t index = parcel.ReadUint32() % (sizeof(g_fuzzFuncs) / sizeof(FuzzFunc *));
     auto fuzzFunc = g_fuzzFuncs[index];
     fuzzFunc(parcel);
     return;
