# Copyright (c) 2023-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../pin_auth.gni")

ohos_source_set("pinauth_ipc_fuzzer") {
  branch_protector_ret = "pac_ret"
  include_dirs = [
    "../../../frameworks/ipc/inc",
    "../../../frameworks/ipc/common_defines",
  ]

  sources = [
    "../../../frameworks/ipc/src/inputer_get_data_proxy.cpp",
    "../../../frameworks/ipc/src/inputer_get_data_stub.cpp",
    "../../../frameworks/ipc/src/inputer_set_data_proxy.cpp",
    "../../../frameworks/ipc/src/inputer_set_data_stub.cpp",
    "../../../frameworks/ipc/src/pin_auth_proxy.cpp",
    "../../../frameworks/ipc/src/pin_auth_stub.cpp",
  ]

  configs = [ "../../../common:iam_log_config" ]
  public_configs = [ "../../../frameworks:pinauth_ipc_config" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "user_auth_framework:userauth_client",
  ]

  subsystem_name = "useriam"
  part_name = "pin_auth"
}

ohos_source_set("pinauthservice_source_set_fuzzer") {
  branch_protector_ret = "pac_ret"
  sources = [
    "../../../services/modules/driver/src/pin_auth_driver_hdi.cpp",
    "../../../services/modules/driver/src/pin_auth_interface_adapter.cpp",
    "../../../services/modules/executors/src/pin_auth_all_in_one_hdi.cpp",
    "../../../services/modules/executors/src/pin_auth_collector_hdi.cpp",
    "../../../services/modules/executors/src/pin_auth_executor_callback_hdi.cpp",
    "../../../services/modules/executors/src/pin_auth_executor_hdi_common.cpp",
    "../../../services/modules/executors/src/pin_auth_verifier_hdi.cpp",
    "../../../services/modules/inputters/src/i_inputer_data_impl.cpp",
    "../../../services/modules/inputters/src/pin_auth_manager.cpp",
    "../../../services/sa/src/pin_auth_service.cpp",
  ]

  configs = [
    "../../../services:pin_auth_services_config",
    "../../../common:iam_log_config",
    "../../../common:iam_utils_config",
  ]

  public_configs = [ "../../../services:pin_auth_services_config" ]

  deps = [ "../common_fuzzer:pinauth_ipc_fuzzer" ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "drivers_interface_pin_auth:libpin_auth_proxy_2.0",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "ipc:ipc_single",
    "openssl:libcrypto_shared",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "user_auth_framework:userauth_executors",
  ]

  defines = []
  if (sensors_miscdevice_enable) {
    external_deps += [ "miscdevice:vibrator_interface_native" ]
    defines += [ "SENSORS_MISCDEVICE_ENABLE" ]
  }
  if (customization_enterprise_device_management_enable) {
    external_deps += [ "enterprise_device_management:edmservice_kits" ]
    defines += [ "CUSTOMIZATION_ENTERPRISE_DEVICE_MANAGEMENT_ENABLE" ]
  }

  remove_configs = [ "//build/config/compiler:no_exceptions" ]

  subsystem_name = "useriam"
  part_name = "pin_auth"
}
